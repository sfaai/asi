@model WebApplication1.CSDNM
@using WebApplication1.Utility

@{
//ViewBag.Title = "Edit Debit Note";
}
<div class="border border-info bg-info" style="width:98vw">
    <h4 class="h4 text-center">@ViewBag.Title</h4>
</div>

@if (@Html.Action() == "Delete")
{
    <div class="border border-info bg-warning" style="width:98vw">
        <br />
        <h4 class="h4 text-center">ARE YOU SURE YOU WANT TO DELETE THIS</h4>
        <br />
    </div>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        <div class="form-group form-check-inline" style="width:96vw">
            <div class="form-group col-md-3 form-check-inline">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.TRNO, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-8">
                    @if (Model.CSDNDs.Count > 0)
                    {

                        @Html.EditorFor(model => model.TRNO, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                    }
                    else
                    {
                        @Html.EditorFor(model => model.TRNO, new { htmlAttributes = new { @class = "form-control" } })
                    }
                    @Html.ValidationMessageFor(model => model.TRNO, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-6 form-check-inline">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.CONO, htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-md-10">
                    @if ((@Html.Action() != "Create") && ((IQueryable<CSDND>)ViewBag.CSDND).ToList().Count > 0)
                    {
                        @Html.HiddenFor(model => model.CONO);
                        @Html.Editor("CONAME", new { htmlAttributes = new { @class = "form-control", @readonly = true, @value = ViewBag.CONAME } })
                    }
                    else
                    {
                        @Html.DropDownList("CONO", null, htmlAttributes: new { @class = "form-control" })
                    }
                    @Html.ValidationMessageFor(model => model.CONO, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group col-md-3 form-check-inline">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.VDATE, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-8">
                    @Html.EditorFor(model => model.VDATE, new { htmlAttributes = new { @Value = Model.VDATE.ToString("yyyy-MM-dd"), @class = "form-control date datepicker" } })

                    @Html.ValidationMessageFor(model => model.VDATE, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div id="divEditCompany">
            @{Html.RenderPartial("Partial/EditCompany", @Model);}
        </div>

        <div class="form-group form-check-inline" style="width:96vw">
            <div class="form-group col-md-6 form-check-inline">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.ATTN, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ATTN, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ATTN, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-6 form-check-inline">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.REM, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.REM, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.REM, "", new { @class = "text-danger" })
                </div>
            </div>



            @*<div class="form-group col-md-2 form-check-inline">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.POST, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.POSTBool, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.POST, "", new { @class = "text-danger" })
                    </div>
                </div>*@
        </div>

        @Html.HiddenFor(model => model.POST)
        @Html.HiddenFor(model => model.POSTBool)
        @Html.HiddenFor(model => model.SEQNO)
        @Html.HiddenFor(model => model.STAMP)

        @*<div class="form-group col-md-10 form-check-inline">
                @Html.LabelFor(model => model.SEQNO, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.SEQNO, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SEQNO, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-10 form-check-inline">
                @Html.LabelFor(model => model.STAMP, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.STAMP, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.STAMP, "", new { @class = "text-danger" })
                </div>
            </div>*@

        @if (!((Model.TRNO == null) || (Model.TRNO == "") || (!ViewData.ModelState.IsValid)))
        {
            if ((Html.Action() == "Details") || (Html.Action() == "Delete"))
            {
                <div id="divCSCND">
                    @{ViewBag.Id = Model.TRNO; Html.RenderPartial("Partial/CSDNDView", @Model.CSDNDs);}
                </div>
                        }
                        else
                        {
                            <div id="divCSCND">
                                @{ViewBag.Id = Model.TRNO; Html.RenderPartial("Partial/CSDND", @Model.CSDNDs);}
                            </div>
                                        }
                                    }


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @if (@Html.Action() == "Details")
                {
                    if (!Model.archived)
                    {
                        @Html.ActionLink(" Edit", "Edit", new { id = MyHtmlHelpers.ConvertIdToByteStr(Model.TRNO) }, new { @class = "btn btn-primary fa fa-edit", title = "Edit" })
                    }
                }
                else
                {
                    if ((Html.Action() == "Delete") && (!ViewData.ModelState.IsValid)) { }
                    else
                    {
                        <input type="submit" value="Confirm" class="btn btn-primary fa fa-flash" Title="Execute" />
                    }
                }
                @if (Model.TRNO != null)
                {
                    @Html.ActionLink(" Debit Note", "DNote", new { id = MyHtmlHelpers.ConvertIdToByteStr(Model.TRNO) }, new { @class = "btn btn-info fa fa-print", title = "print" })
                }
                @Html.ActionLink(" Back", "Index", new { page = ViewBag.page }, new { @class = "btn btn-info fa fa-arrow-left" })
            </div>
        </div>

    </div>


                                    }


@section Scripts {

    <script>
        var datefield = document.createElement("input")
        datefield.setAttribute("type", "date")
        if (datefield.type != "date") {
            jQuery(function ($) {
                $('.datepicker').datepicker({
                    format: 'dd/mm/yyyy',
                    startDate: '-30000d',

                });

            })
        }

        JModel = null;

        $(document).ready(
            function () {

                JModel = { "CONO": "@Model.CONO",  "ATTN": "@Model.ATTN",  "COADDR": "@Model.COADDR", "REM": "@Model.REM","STAMP": @Model.STAMP }
            })

        $('#CONO').change(function () {


            JModel.CONO = $('#CONO').val();
            JModel.ATTN = $('#ATTN').val();
            JModel.COADDR = $('#COADDR').val();
            JModel.REM = $('#REM').val();
            JModel.STAMP = $('#STAMP').val();


            var jData = JSON.stringify(JModel);


            $("#divEditCompany").load('@Url.Action("EditCompany")', JModel, function () {

            });

        })

        if (("@Html.Action()" == "Details") || ("@Html.Action()" == "Delete"))  {
            $(":input").attr("readonly", true);
            $("select").attr("disabled", true);
            $("input[type=checkbox]").attr("disabled", true);

        }

    </script>


    @Scripts.Render("~/bundles/jqueryval")
}
