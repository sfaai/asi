@model WebApplication1.CSRCP
@using WebApplication1.Utility

@{
    ViewBag.Title = Html.Action().Substring(0, Html.Action().Length - 1) + " Receipt Cancellation " + Model.CTRNO;
}
<div class="border border-info bg-info" style="width:98vw">
    <h4 class="h4 text-center">@ViewBag.Title</h4>
</div>

@if (@Html.Action() == "DeleteC")
{
    <div class="border border-info bg-warning" style="width:98vw">
        <br />
        <h4 class="h4 text-center">Original Receipt will be restored</h4>
        <br />
    </div>
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.TRNO)


        <div class="form-group form-check-inline" style="width:96vw">
            <div class="form-group col-md-6 form-check-inline">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.CVDATE, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(model => model.CVDATE, new { htmlAttributes = new { @Value = ((DateTime)Model.CVDATE).ToString("yyyy-MM-dd"), @class = "form-control date datepicker" } })

                    @Html.ValidationMessageFor(model => model.CVDATE, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-6 form-check-inline">


                <div class="col-md-3">
                    @Html.LabelFor(model => model.CREM, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(model => model.CREM, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CREM, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>


        <div class="form-group form-check-inline" style="width:96vw">
            <div class="form-group col-md-4 form-check-inline">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.VDATE, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(model => model.VDATE, new { htmlAttributes = new { @Value = Model.VDATE.ToString("yyyy-MM-dd"), @class = "form-control date datepicker" } })

                    @Html.ValidationMessageFor(model => model.VDATE, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-3 form-check-inline">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.TRNO, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(model => model.TRNO, new { htmlAttributes = new { @class = "form-control" } })

                    @Html.ValidationMessageFor(model => model.TRNO, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-5 form-check-inline">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.CONO, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-8">
                    @if ((@Html.Action() != "Create") && ((IQueryable<CSTRANM>)ViewBag.CSTRANM).ToList().Count > 0)
                    {
                        @Html.HiddenFor(model => model.CONO);
                        @Html.Editor("CONAME", new { htmlAttributes = new { @class = "form-control", @readonly = true, @value = ViewBag.CONAME } })
                    }
                    else
                    {
                        @Html.DropDownList("CONO", null, "No Selection", htmlAttributes: new { @class = "form-control" })
                    }
                    @Html.ValidationMessageFor(model => model.CONO, "", new { @class = "text-danger" })
                </div>

            </div>
        </div>

        <div class="form-group form-check-inline" style="width:96vw">
            <div class="form-group col-md-4 form-check-inline">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.RCAMT, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-8">
                    @Html.EditorFor(model => model.RCAMT, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RCAMT, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-3 form-check-inline">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.RCMODE, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-9">
                    @Html.DropDownList("RCMODE", null, "No Selection", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.RCMODE, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-5 form-check-inline">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.RCMAPCODE, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-8">
                    @Html.DropDownList("RCMAPCODE", null, "No Selection", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.RCMAPCODE, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div id="divEditRCMode">
            @{Html.RenderPartial("Partial/EditRCMode", @Model);}
        </div>

        <div class="form-group form-check-inline" style="width:96vw">
            <div class="form-group col-md-4 form-check-inline">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.COMAMT, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-8">
                    @Html.EditorFor(model => model.COMAMT, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.COMAMT, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-3 form-check-inline">
                <div class="col-md-3">
                    @Html.LabelFor(model => model.NETAMT, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-9">
                    @Html.EditorFor(model => model.NETAMT, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.NETAMT, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-5 form-check-inline">
                <div class="col-md-2">
                    @Html.LabelFor(model => model.REM, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-10">
                    @Html.EditorFor(model => model.REM, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.REM, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        @*<div class="form-group form-check-inline" style="width:96vw">


                <div class="form-group col-md-3 form-check-inline">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.SEQNO, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.SEQNO, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SEQNO, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-3 form-check-inline">
                    <div class="col-md-4">
                        @Html.LabelFor(model => model.POST, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.POSTBool, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.POST, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>*@
        @Html.HiddenFor(model => model.SEQNO)
        @Html.HiddenFor(model => model.POSTBool)
        @Html.HiddenFor(model => model.REM)

        @*<div class="form-group col-md-10 form-check-inline">
                @Html.LabelFor(model => model.CFLAG, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.CFLAG, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CFLAG, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-10 form-check-inline">
                @Html.LabelFor(model => model.CTRNO, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.CTRNO, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CTRNO, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-10 form-check-inline">
                @Html.LabelFor(model => model.CVDATE, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.CVDATE, new { htmlAttributes = new { @Value = Model.CVDATE?.ToString("yyyy-MM-dd"), @class = "form-control date datepicker" } })
                    @Html.ValidationMessageFor(model => model.CVDATE, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-10 form-check-inline">
                @Html.LabelFor(model => model.CREM, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.CREM, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CREM, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-10 form-check-inline">
                @Html.LabelFor(model => model.CSEQNO, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.CSEQNO, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CSEQNO, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-10 form-check-inline">
                @Html.LabelFor(model => model.CPOST, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.CPOST, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CPOST, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-10 form-check-inline">
                @Html.LabelFor(model => model.STAMP, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.STAMP, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.STAMP, "", new { @class = "text-danger" })
                </div>
            </div>*@

        @Html.HiddenFor(model => model.CFLAG)
        @Html.HiddenFor(model => model.CTRNO)
        @Html.HiddenFor(model => model.CVDATE)
        @Html.HiddenFor(model => model.CREM)
        @Html.HiddenFor(model => model.RCMODE)
        @Html.HiddenFor(model => model.RCMAPCODE)

        @Html.HiddenFor(model => model.ISSBANK)
        @Html.HiddenFor(model => model.ISSLOC)
        @Html.HiddenFor(model => model.CSEQNO)
        @Html.HiddenFor(model => model.CPOST)
        @Html.HiddenFor(model => model.STAMP)
        @*@Html.HiddenFor(model => model.HKMAP)
            @Html.HiddenFor(model => model.HKBANK)
            @Html.HiddenFor(model => model.HKRCMODE)
            @Html.HiddenFor(model => model.HKRCISSLOC)*@


        @if (!((Model.TRNO == null) || (Model.TRNO == "") || (!ViewData.ModelState.IsValid)))
        {
            <div id="Allocated1">
                @Html.Action("CSTRANMAllocatedC", new { id = MyHtmlHelpers.ConvertIdToByteStr(Model.CTRNO) })
            </div>

        }



        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @if (@Html.Action() == "Details")
                {
                    if (!Model.archived)
                    {
                        @Html.ActionLink(" Edit", "Edit", new { id = MyHtmlHelpers.ConvertIdToByteStr(Model.TRNO) }, new { @class = "btn btn-primary fa fa-edit", title = "Edit" })
                    }
                }
                else
                {
                    if ((Html.Action() == "DeleteC") && (!ViewData.ModelState.IsValid)) { }
                    else
                    {
                        <input type="submit" value="Confirm" class="btn btn-primary fa fa-flash" Title="Execute" />
                    }
                }
                @if (Model.TRNO != null)
                {
                    @Html.ActionLink(" Receipt", "Receipt", new { id = MyHtmlHelpers.ConvertIdToByteStr(Model.TRNO) }, new { @class = "btn btn-info fa fa-print", title = "print" })
                }
                @Html.ActionLink(" Back", "Index", new { page = ViewBag.page }, new { @class = "btn btn-info fa fa-arrow-left" })
            </div>
        </div>

    </div>
                }







@section Scripts {

    <script>
        var datefield = document.createElement("input")
        datefield.setAttribute("type", "date")
        if (datefield.type != "date") {
            jQuery(function ($) {
                $('.datepicker').datepicker({
                    format: 'dd/mm/yyyy',
                    startDate: '-30000d',

                });

            })
        }

        $('#RCAMT,#COMAMT').change(function() {
            $('#NETAMT').val(parseFloat($('#RCAMT').val()) + parseFloat($('#COMAMT').val()));
        }
        )

        JModel = null;
        NModel = null;

        $(document).ready(
            function () {

                JModel = { "RCMODE": "@Model.RCMODE","ISSBANK" : "@Model.ISSBANK", "ISSLOC": "@Model.ISSLOC", "ISSREFNO": "@Model.ISSREFNO", "ISSDATE": "@Model.ISSDATE",  "REM": "@Model.REM","STAMP": @Model.STAMP }
                NModel = { "source": "CSRCP", "sourceno": "@Model.TRNO", "id": "0", "trno": "@Model.TRNO", "cono": "@Model.CONO" }
            })

        $('#RCMODE').change(function () {


            JModel.RCMODE = $('#RCMODE').val();
            JModel.REM = $('#REM').val();
            JModel.STAMP = $('#STAMP').val();
            JModel.ISSBANK = $('#ISSBANK').val();
            JModel.ISSREFNO = $('#ISSREFNO').val();
            JModel.ISSLOC = $('#ISSLOC').val();
            JModel.ISSDATE = $('#ISSDATE').val();


            var jData = JSON.stringify(JModel);


            $("#divEditRCMode").load('@Url.Action("EditRCMode")', JModel, function () {

            });

        })

        var hash = window.location.hash.substring(1); //Puts hash in variable, and removes the # character
        //window.location.hash = '';
        $(document).ready(function () {

            if (hash) {


                $('#tab_' + hash).click(); //function () { alert('clicked ' + hash); });
                //window.location.hash = '#' + hash;

                // hash found
            } else {
                // No hash found
            }
        })

        if (("@Html.Action()" == "Details")|| ("@Html.Action()" == "EditC") || ("@Html.Action()" == "DeleteC"))  {
            $(":input").attr("readonly", true);
            $("select").attr("disabled", true);
            $("input[type=checkbox]").attr("disabled", true);
            $("#btnTax").hide();
        }

        if  ("@Html.Action()" == "EditC") {
            $("#CREM").attr("readonly", false);
            $("#CVDATE").attr("readonly", false);
        }

    </script>


    @Scripts.Render("~/bundles/jqueryval")
}
