@model WebApplication1.CSCOSHEQ
@using WebApplication1.Utility

@{
    Layout = "~/Views/Shared/_LayoutG.cshtml";
}
<div class="border border-info bg-info">
    <h4 class="h4 text-center">@ViewBag.Title @Model.CSCOSH.CSCOMSTR.CONAME</h4>
</div>

@if (@Html.Action() == "Delete")
{
    <div class="border border-info bg-warning" style="width:98vw">
        <br />
        <h4 class="h4 text-center">ARE YOU SURE YOU WANT TO DELETE THIS</h4>
        <br />
    </div>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.MVNO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.MVNO, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.MVNO, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.MVID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.MVID, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.MVID, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.MVSIGN, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.MVSIGN, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.MVSIGN, "", new { @class = "text-danger" })
            </div>
        </div>



        @Html.HiddenFor(x => x.CONO)

        <div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.MVDATE, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MVDATE, new { htmlAttributes = new { @Value = Model.MVDATE.ToString("yyyy-MM-dd"), @class = "form-control date datepicker" } })

                @Html.ValidationMessageFor(model => model.MVDATE, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.PRSCODE, null, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Model.MVTYPE == "Split")
                {
                    @Html.DropDownList("PRSCODE", null, "No Selection", htmlAttributes: new { @class = "form-control", @disabled = true })
                    @Html.HiddenFor(m => m.PRSCODE)
                }
                else
                {
                    @Html.DropDownList("PRSCODE", null, "No Selection", htmlAttributes: new { @class = "form-control" })
                }
                @Html.ValidationMessageFor(model => model.PRSCODE, "", new { @class = "text-danger" })
            </div>
        </div>



        @Html.HiddenFor(x => x.MVTYPE)
        @Html.HiddenFor(x => x.MVSIGN)




        <div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.EQCODE, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Model.MVTYPE == "Split")
                {
                    @Html.DropDownListFor(model => model.EQCODE, null, "No Selection", htmlAttributes: new { @class = "form-control", @disabled = true })
                    @Html.HiddenFor( m => m.PRSCODE)
                }
                else
                {
                    @Html.DropDownListFor(model => model.EQCODE, null, "No Selection", htmlAttributes: new { @class = "form-control" })
                }
                @Html.ValidationMessageFor(model => model.EQCODE, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.SCRIPT, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-1">
                @Html.EditorFor(model => model.SCRIPTBool, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SCRIPT, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.CERTNO, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-7">
                @Html.EditorFor(model => model.CERTNO, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CERTNO, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.SHAREAMT, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SHAREAMT, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SHAREAMT, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(x => x.SCRIPT)
        @Html.HiddenFor(x => x.SSHAREAMT)
        @Html.HiddenFor(x => x.SHAREOS)
        @Html.HiddenFor(x => x.SAMT)
        @Html.HiddenFor(x => x.FOLIONOSRC)

        <div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.AMT, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AMT, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AMT, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.REM, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.REM, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.REM, "", new { @class = "text-danger" })
            </div>
        </div>


        @Html.HiddenFor(x => x.REFCNT)
        @Html.HiddenFor(x => x.COMPLETE)
        @Html.HiddenFor(x => x.COMPLETED)
        @Html.HiddenFor(x => x.STAMP)

        @if (Model.MVTYPE == "Conversion")
        {
            <div id="divPartialCOSH">
                @{Html.RenderPartial("Partial/PartialCOSH", @Model.Details);}
            </div>
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @if (@Html.Action() == "Details")
                {

                    @Html.ActionLink(" Edit", "Edit", new { id = MyHtmlHelpers.ConvertIdToByteStr(Model.CONO), person = Model.PRSCODE, mvno = Model.MVNO, mvid = Model.MVID, mvtype = Model.MVTYPE }, new { @class = "btn btn-primary fa fa-edit", title = "Edit" })

                }
                else
                {
                    if ((Html.Action() == "Delete") && (!ViewData.ModelState.IsValid)) { }
                    else
                    {
                        <input type="submit" value="Confirm" class="btn btn-primary fa fa-flash" Title="Execute" />
                    }
                }
                @Html.ActionLink(" Back", "ShareMove", "CSCOSHes", new { id = MyHtmlHelpers.ConvertIdToByteStr(Model.CONO) }, new { @class = "btn btn-info fa fa-arrow-left" })
            </div>
        </div>
    </div>
                    }


@section Scripts {

    <script>
        var datefield = document.createElement("input")
        datefield.setAttribute("type", "date")
        if (datefield.type != "date") {
            jQuery(function ($) {
                $('.datepicker').datepicker({
                    format: 'dd/mm/yyyy',
                    startDate: '-30000d',

                });

            })
        }

        $("#PRSCODE").change(function () {
            var prscode = $("#PRSCODE option:selected").text();
            var folio = prscode.split(" | ")[1];
            $("#FOLIONOSRC").val(folio);
        })

        if (("@Html.Action()" == "Details") || ("@Html.Action()" == "Delete")) {
            $(":input").attr("readonly", true);
            $("select").attr("disabled", true);
            $("input[type=checkbox]").attr("disabled", true);

        }
    </script>
    @Scripts.Render("~/bundles/jqueryval")
}
