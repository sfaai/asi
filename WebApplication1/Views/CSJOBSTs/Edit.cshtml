@model WebApplication1.CSJOBST
@using WebApplication1.Utility

@{
    ViewBag.Title = ViewBag.Title + Model.JOBNO + " / " + Model.CASENO;
}
<div class="border border-info bg-info" style="width:98vw">
    <h4 class="h4 text-center">@ViewBag.Title</h4>
</div>


@if (@Html.Action() == "Delete")
{
    <div class="border border-info bg-warning" style="width:98vw">
        <br />
        <h4 class="h4 text-center">ARE YOU SURE YOU WANT TO DELETE THIS</h4>
        <br />
    </div>
}
  @{ bool canChange = (Html.Action() == "Create"); }
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
  
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.JOBNO)

        @Html.HiddenFor(model => model.CASENO)

        @if (canChange)
        {
        <div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.INDATE, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.INDATE, new { htmlAttributes = new { @Value = Model.INDATE.ToString("yyyy-MM-dd"), @class = "form-control date datepicker" } })
                @Html.ValidationMessageFor(model => model.INDATE, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.INTIME, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.INTIME, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.INTIME, "", new { @class = "text-danger" })
            </div>
        </div>

        }
        else
        {
            <div class="form-group col-md-10 form-check-inline">
                @Html.LabelFor(model => model.INDATE, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.INDATE, new { htmlAttributes = new { @Value = Model.INDATE.ToString("yyyy-MM-dd"), @class = "form-control date datepicker", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.INDATE, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group col-md-10 form-check-inline">
                @Html.LabelFor(model => model.INTIME, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.INTIME, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                    @Html.ValidationMessageFor(model => model.INTIME, "", new { @class = "text-danger" })
                </div>
            </div>


        }
        <div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.STAGEFR, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.STAGEFR, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.STAGEFR, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.STAGETO, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.STAGETO, null, "No Selection", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.STAGETO, "", new { @class = "text-danger" })
            </div>
        </div>



        @*<div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.OUTDATE, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
					@Html.EditorFor(model => model.OUTDATE, new { htmlAttributes = new {  @Value = Model.OUTDATE.ToString("yyyy-MM-dd"), @class = "form-control date datepicker" } })

                @Html.ValidationMessageFor(model => model.OUTDATE, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.SENDMODE, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.SENDMODE, null, "No Selection", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.SENDMODE, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.REM, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.REM, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.REM, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.INIDX, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.INIDX, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.INIDX, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group col-md-10 form-check-inline">
            @Html.LabelFor(model => model.STAMP, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.STAMP, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.STAMP, "", new { @class = "text-danger" })
            </div>
        </div>*@

        @Html.HiddenFor(model => model.OUTDATE)
        @Html.HiddenFor(model => model.INIDX)
        @Html.HiddenFor(model => model.STAMP)

        <div class="form-group">
            @if (@Html.Action() == "Details")
            {

                @Html.ActionLink(" Edit", "Edit", new { id = MyHtmlHelpers.ConvertIdToByteStr(Model.JOBNO), row = Model.CASENO, indate = Model.INDATE, intime = Model.INTIME, rel = 1 }, new { @class = "btn btn-primary fa fa-edit", title = "Edit" })

            }
            else
            {
                if ((Html.Action() == "Delete") && (!ViewData.ModelState.IsValid)) { }
                else
                {
                    <input type="submit" value="Confirm" class="btn btn-primary fa fa-flash" Title="Execute" />
                }
            }
          
            @Html.ActionLink(" Back", "Edit", "CSJOBDs", new { id = MyHtmlHelpers.ConvertIdToByteStr(Model.JOBNO), row = Model.CASENO, rel = 1, page = ViewBag.page }, new { @class = "btn btn-primary fa fa-arrow-left", title = "Back" })
        </div>
    </div>
}


@section Scripts {

<script>
            var datefield = document.createElement("input")
        datefield.setAttribute("type", "date")
    if (datefield.type != "date") { 
        jQuery(function ($) { 
            $('.datepicker').datepicker({
                format: 'dd/mm/yyyy',
                startDate: '-30000d',

            });

        })
    }

    if (("@Html.Action()" == "Details") || ("@Html.Action()" == "Delete")) {
        $(":input").attr("readonly", true);
        $("select").attr("disabled", true);
        $("input[type=checkbox]").attr("disabled", true);

    }
</script>


    @Scripts.Render("~/bundles/jqueryval")
}
